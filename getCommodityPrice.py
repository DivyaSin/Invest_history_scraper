# How to run: python [file-name] [start-date] [end-date] [commodity]
# Example: python getCommodityPrice.py 2017-09-10 2017-09-20 gold

import csv
import sys
import pandas as pd 
import datetime

# This function reads csv file generated by scraper and returns filtered dataframe.
def readFile(start_date, end_date, commodity):
	path = './invest_history.csv'
	df = pd.read_csv(path, sep=",", usecols = ['commodity', 'opening', 'vol', 'price', 'high', 'low', 'date', 'change'])
	# Extract chunks of dataframe of commodity between start and end dates.
	filtered_df = df[(df["commodity"]==commodity) & (start_date<=df["date"]) & (df["date"]<=end_date)]
	# Extract prices of filtered dataframe.
	return filtered_df['price']

# This function returns average and variance of prices
def calMeanVariance(start_date, end_date, commodity):
	price_df = readFile(start_date, end_date, commodity)
	price_sum = 0
	count = 0
	average = 0
	average_square = 0
	# Calculate average.
	for price in price_df:
		price = price.replace(",", "")
		price_sum = float(price) + price_sum
		count += 1
	average = price_sum / count
	# Calculate variance.
	for price in price_df:
		price = price.replace(",", "")
		diff = average - float(price)
		average_square = average_square + (diff**2)
	variance = average_square / count
	print "Commodity, Average, Variance:"
	print commodity, average, variance

# Read arguments from terminal. 
# Dates are converted into format compatible to dates in invest_history.csv file.
start_date = (datetime.datetime.strptime(sys.argv[1], '%Y-%m-%d')).strftime('%b %d, %Y')
end_date = (datetime.datetime.strptime(sys.argv[2], '%Y-%m-%d')).strftime('%b %d, %Y')
today_date = (datetime.datetime.strptime(str(datetime.date.today()), '%Y-%m-%d')).strftime('%b %d, %Y')
# Check if end date provided by user is greater than today's date.
if str(sys.argv[2])>str(datetime.date.today()):
	print "Today's date is "+today_date+". Please enter a valid end date."
else:
	calMeanVariance(start_date, end_date, sys.argv[3])





